Inheritance definition and types
___
Inheritance is the reusing of a previously defined class as a component of a new class.
___
In other words, inheritance is the capability of one class to derive or inherit the properties from another class. The benefits of inheritance are...
- It can represent real-world relationships with some level of accuracy
- It provides reusability of a code
  (We donâ€™t have to write the same class code again)
  (Also, it allows us to add more features to a class without modifying it)
- It is transitive in nature
  (Hence, if class B inherits from another class A, then all the subclasses of B would automatically inherit from class A.
___
Inheritance types
--x--
Simple:
Child class inherits from only one parent class.

Multiple:
Child class inherits from multiple parent classes.

Multilevel:
A parent's child can have its own children.
(Hence, we have a child and grandchild relationship)

Heirarchical:
A parent may have multiple children, who may each have their own children.
--x--
Simple and multiple inheritance are the primary kinds. The other types are merely extensions of the inheritance system.
---*---*---
Using attributes of the parent class
___
All objects of the children of a parent class use a single object (i.e. instance) of the parent class.
___
In other words, whenever we instantiate child classes, we instantiate the parent class only once. Hence, changing attributes in the parent class, even variable attributes, will reflect for every child class.